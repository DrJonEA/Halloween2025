.pio_version 0 // only requires PIO version 0

;4-wire data output
.program qspi_4wire_data
.side_set 1 opt
.wrap_target
    out pins, 4        side 0
    nop                side 1             
.wrap

;1-line command output
.program qspi_1write_cmd
.side_set 1 opt
.wrap_target   
    out pins, 1        side 0
    nop                side 1                   
.wrap 

% c-sdk {

#include "hardware/clocks.h"
#include "hardware/gpio.h"

static inline void qspi_4wire_data_program_init(PIO pio, uint sm, uint offset, uint pin_scl, uint out_base, uint out_pin_num) {
    pio_sm_config c = qspi_4wire_data_program_get_default_config( offset );  

    // CLK
    pio_gpio_init(pio, pin_scl);
    pio_sm_set_consecutive_pindirs(pio, sm, pin_scl, 1, true);
    sm_config_set_sideset_pins(&c, pin_scl);

    // DAT
    sm_config_set_out_pins(&c, out_base, out_pin_num);
    sm_config_set_out_shift(&c, false, true, 8);
    for (uint32_t pin_offset = 0; pin_offset < out_pin_num; pin_offset++) {
        pio_gpio_init(pio, out_base + pin_offset);
    }
    pio_sm_set_consecutive_pindirs(pio, sm, out_base, out_pin_num, true);

    // PIO CLK
    sm_config_set_clkdiv( &c, 1.0f);

    // INIT
    pio_sm_init( pio, sm, offset, &c );
    pio_sm_clear_fifos( pio , sm);
    pio_sm_set_enabled( pio, sm, true );
}

static inline void qspi_1write_cmd_program_init(PIO pio, uint sm, uint offset, uint pin_scl, uint out_base, uint out_pin_num) {
    pio_sm_config c = qspi_1write_cmd_program_get_default_config( offset );

    // CLK
    pio_gpio_init(pio, pin_scl);
    pio_sm_set_consecutive_pindirs(pio, sm, pin_scl, 1, true);
    sm_config_set_sideset_pins(&c, pin_scl);

    // DAT
    sm_config_set_out_pins(&c, out_base, out_pin_num);
    sm_config_set_out_shift(&c, false, true, 8);
    for (uint32_t pin_offset = 0; pin_offset < out_pin_num; pin_offset++) {
        pio_gpio_init(pio, out_base + pin_offset);
    }
    pio_sm_set_consecutive_pindirs(pio, sm, out_base, out_pin_num, true);

    // PIO CLK
    sm_config_set_clkdiv( &c, 1.0f);

    // INIT
    pio_sm_init( pio, sm, offset, &c );
    pio_sm_clear_fifos( pio , sm);
    pio_sm_set_enabled( pio, sm, true );
}

%}